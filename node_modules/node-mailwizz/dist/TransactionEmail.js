"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Request_1 = __importDefault(require("./Request"));
const encrypt_1 = require("./utils/encrypt");
const path = "/transactional-emails";
class TransactionEmail extends Request_1.default {
    /**
     * @description Creates an instance of TransactionEmail.
     * @see https://api-docs.mailwizz.com/#transactional-emails
     * @memberof TransactionEmail
     */
    constructor({ publicKey, secret, baseUrl }) {
        super({
            publicKey: publicKey,
            secret: secret,
            baseUrl: baseUrl
        });
    }
    /**
     * @description Create a transactional email
     * @param {CreateTransactionalEmailParams} params - Params of the request
     * @param {string} params.toName - Name of the recipient
     * @param {string} params.toEmail - Email of the recipient
     * @param {string} params.fromName - Name of the sender
     * @param {string} params.subject - Subject of the email
     * @param {string} params.body - Body of the email
     * @param {string} params.sendAt - UTC datetime (Y-m-d H:i:s format)
     * @param {string} params.plainText - Plain text of the email
     * @param {string} params.replyToName - Reply to name
     * @param {string} params.replyToEmail - Reply to email
     * @returns {Promise<CreateTransactionalEmailResponse>} - Promise of the response
     * @memberof TransactionEmail
     * @see https://api-docs.mailwizz.com/#create-a-transactional-email
     */
    create({ toName, toEmail, fromName, subject, body, plainText, sendAt, replyToName, replyToEmail }) {
        if (!toName || !toEmail || !fromName || !subject || !body || !sendAt) {
            return Promise.reject("ParamInvalid");
        }
        let data = {
            to_name: toName,
            to_email: toEmail,
            from_name: fromName,
            reply_to_email: replyToEmail,
            reply_to_name: replyToName,
            subject: subject,
            send_at: sendAt
        };
        if (body)
            data.body = (0, encrypt_1.base64Encode)(body);
        if (plainText)
            data.plain_text = (0, encrypt_1.base64Encode)(plainText);
        this.url = path;
        this.method = Request_1.default.Type.POST;
        this.data = { email: data };
        return this.send();
    }
}
exports.default = TransactionEmail;
