"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = __importDefault(require("./utils/data"));
const querystring_1 = require("querystring");
const encrypt_1 = require("./utils/encrypt");
const axios_1 = __importDefault(require("axios"));
const qs_1 = __importDefault(require("qs"));
class Request {
    constructor({ publicKey, secret, baseUrl }) {
        this.config = { publicKey, secret, baseUrl };
        this.url = null;
        this.method = null;
        this.data = {};
        this.query = {};
        this.header = {
            "X-MW-PUBLIC-KEY": publicKey,
            "X-MW-TIMESTAMP": Math.floor(Date.now() / 1000).toString(),
            "X-MW-REMOTE-ADDR": ""
        };
        this.axiosInstance = axios_1.default.create({ baseURL: baseUrl });
    }
    static get Type() {
        return data_1.default;
    }
    send() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.data instanceof Object && this.method === data_1.default.GET) {
                this.query = this.data;
                this.data = {};
            }
            this.__sign();
            this.__setXHttpMethodOverride();
            const options = {
                method: this.method || "GET",
                url: this.url || "",
                headers: this.header
            };
            if (this.method === data_1.default.GET) {
                options.params = this.query;
            }
            else {
                options.data = qs_1.default.stringify(this.data);
                options.headers = Object.assign(Object.assign({}, options.headers), { "Content-Type": "application/x-www-form-urlencoded" });
            }
            try {
                const response = yield this.axiosInstance(options);
                return response.data;
            }
            catch (err) {
                if (!err.response)
                    throw err;
                if (!err.response.data)
                    throw err.response;
                throw err.response.data;
            }
        });
    }
    __setXHttpMethodOverride() {
        this.header["X-HTTP-Method-Override"] = this.method;
    }
    __sign() {
        const { header, config: { secret: privateKey }, method, data, query } = this;
        const paramPost = method === data_1.default.GET ? {} : data;
        const paramGet = method === data_1.default.GET ? data : query;
        let params = Object.assign({}, header, paramPost);
        params = (0, encrypt_1.ksort)(params);
        let apiUrl = this.config.baseUrl + this.url;
        let separator = "?";
        if (method === data_1.default.GET && Object.keys(paramGet).length > 0) {
            apiUrl += "?" + (0, querystring_1.stringify)(paramGet);
            separator = "&";
        }
        const signatureString = `${method} ${apiUrl}${separator}${(0, encrypt_1.serialize)(params)}`;
        const hash = (0, encrypt_1.hmac_sha)(privateKey, signatureString);
        this.header["X-MW-SIGNATURE"] = hash;
    }
}
exports.default = Request;
